$fz_base: 16;
$fz: $fz_base;

@import 'normalize.css';

/*
  Функция обрезающая единицы измерения и возвращающая число
  @param {Number}
  @return {Number}
 */

 @function strip-units($number) {
    @return $number / ($number * 0 + 1);
}

/*
  Функция возвращающая значение в em
  **ВСЕГДА ДОЛЖНО БЫТЬ КАК МИНИМУМ 2 ВХОДНЫХ ПАРАМЕТРА**
  - сколько угодно значений может быть передано в функцию
  - последний параметр всегда указывает в каком контексте надо считать em'ы
  @list, @Number $values - значения
  @return EM

  Примеры :
    font-size: em($h1-font-size, 16);
    font-size: em($h1-font-size, $context); Указание контекста(шрифта родителя)
    border-bottom: em(1px solid black) => .0625em solid black) ;
    box-shadow: em(0 0 2px #ccc, inset 0 0 5px #eee, $h1-font-size) => 0 0 .125em #ccc, inset 0 0 .3125em #eee; // Множественные значения

  source: https://github.com/pierreburel/sass-em;
 */

@function em($values...) {
    $context: strip-units(nth($values, length($values)));
    $result: ();
    $separator: list_separator($values);
  
    @for $i from 1 through length($values) - 1 {
      $value: nth($values, $i);
      @if type-of($value) == 'number' {
        $value: strip-units($value);
        $result: append($result, $value / $context * 1em, $separator);
      } @else if type-of($value) == 'list' {
        $result: append($result, em(append($value, $context)...), $separator);
      } @else {
        $result: append($result, $value, $separator);
      }
    }
  
    @return if(length($result) == 1, nth($result, 1), $result);
  }


@font-face {
    font-family: Inter;
    font-style: normal;
    font-weight: 400;
    font-display: swap;
    src: url(../fonts/inter-v11-latin_cyrillic-regular.woff2) format('woff2'),
        url(../fonts/inter-v11-latin_cyrillic-regular.woff) format('woff');
}
@font-face {
    font-family: Inter;
    font-style: normal;
    font-weight: 500;
    font-display: swap;
    src: url(../fonts/inter-v11-latin_cyrillic-500.woff2) format('woff2'),
        url(../fonts/inter-v11-latin_cyrillic-500.woff) format('woff');
}
@font-face {
    font-family: Inter;
    font-style: normal;
    font-weight: 700;
    font-display: swap;
    src: url(../fonts/inter-v11-latin_cyrillic-700.woff2) format('woff2'),
        url(../fonts/inter-v11-latin_cyrillic-700.woff) format('woff');
}
@font-face {
    font-family: 'IBM Plex Sans';
    font-style: normal;
    font-weight: 300;
    font-display: swap;
    src: url(../fonts/ibm-plex-sans-v14-latin_cyrillic-300.woff2) format('woff2'),
    url(../fonts/ibm-plex-sans-v14-latin_cyrillic-300.woff) format('woff');
}

html {
    box-sizing: border-box;
}

body {
    font-family: Inter;
}

*,
*::before,
*::after {
    box-sizing: inherit;
    margin: 0;
    padding: 0;
}

button {
    background-color: transparent;
    border: none;
    cursor: pointer;
    color: inherit;
}

ul,
ol {
    list-style: none;
}

a {
    color: inherit;
    text-decoration: none;
}

img,
svg {
    max-width: 100%;
    height: auto;
    max-height: 100%;
}

h1, h2, h3 {
    font-size: inherit;
}

.container {
    max-width: em(1220, $fz);
    margin-right: auto;
    margin-left: auto;

    padding-right: em(20, $fz);
    padding-left: em(20, $fz);

    @media(max-width: 1024px) {
        max-width: em(820, $fz);
    }
    @media(max-width: 768px) {
        max-width: em(720, $fz);
    }
}

.header {
    position: relative;
    z-index: 1;
    background-color: hsl(0, 0%, 100%);

    &__container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: em(15, $fz);
        padding-bottom: em(15, $fz);
        background-color: hsl(0, 0%, 100%);
    }

    &__logo {
        width: em(92, $fz);
        height: em(34, $fz);
    }

    &__button {
        display: none;

        @media(max-width: 768px) {
            display: block;
        }        
    }

    &__navigation {
        @media(max-width: 768px) {
            position: absolute;
            bottom: 0;
            right: 0;
            left: 0;
            padding: em(16 20, $fz);
            z-index: -1;
            background-color: hsl(0, 0%, 100%);
            transition: transform 0.36s ease-in-out;          

        }   

        &--is-open {
            transform: translateY(100%);
        }
    }
}

.header-button {
    &__icon {
        width: em(36, $fz);
        height: em(36, $fz);
    }
}

.navigation {
    &__list {
        display: flex;

        @media(max-width: 480px) {
            flex-direction: column;
        }
    }

    &__item {
        &:not(:last-child) {
            margin-right: em(43, $fz);

            @media(max-width: 480px) {
                margin-right: 0;
                margin-bottom: em(20, $fz);
            }
        }

        @media(max-width: 480px) {
            margin-right: 0;
        }
    }

    &__link {
        $fz: 18;
        font-size: em($fz, $fz_base);
    }
}

.hero {
    background-image: url('../img/hero.jpg');
    background-repeat: no-repeat;
    background-size: cover;
    background-position: top right;
    color: hsl(0, 0%, 100%);

    &__container {
        min-height: em(540, $fz);
        display: flex;
        align-items: center;
    
    }

    &__content {
        max-width: em(480, $fz);
    }

    &__title {
        margin-bottom: em(18, $fz);
    }

    &__text {
        $fz: 22;
        font-family: 'IBM Plex Sans';
        font-size: em($fz, $fz_base);
        font-weight: 300;
    }

    &__button {
        margin-top: em(50, $fz);
    }
}

.title {
    &__label {
        $fz: 100;
        font-size: em($fz, $fz_base);
        font-weight: 700;
        line-height: em(121, $fz);
        color: hsl(202, 100%, 67%);
    }
}

.hero-button {
    padding: em(11 41, $fz);
    border-radius: em(8, $fz);
    background-color: hsl(202, 100%, 67%);
}